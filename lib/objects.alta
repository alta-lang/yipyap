import Map from "map"
import Vector from "vector"
import String as AltaString from "string"
import Box from "memory"
import Size, Int64 from "types"
import escape from "util.alta"
import TagResolver from "tags.alta"
import Pair, numberToString, floatingPointToString from "util"

function spacesFor(indent: Size): AltaString {
  let result: AltaString

  for i: Size in 0..indent {
    result += ' '
  }

  return result
}

export class Node {
  protected var currentTag: AltaString? = null
  public var tagResolver: Box<TagResolver> = nullptr

  # TODO: make this a write accessor once they're added to Alta
  public function _tag(tag: AltaString): void {
    if tag == this.defaultTag
      this.currentTag = null
    else
      this.currentTag = tag
  }

  protected @virtual @read function defaultTag(): AltaString {
    return "tag:org.alta-lang.yipyap,2020:unknown"
  }

  public @read function tag(): AltaString {
    return this.currentTag ? *this.currentTag : this.defaultTag
  }
  public @read function cannonicalTag(): AltaString {
    if !this.tagResolver
      return "!<" + this.tag + '>'
    let tagger = this.tagResolver as ref TagResolver
    if this.tag.substring(0, length: tagger.primaryNamespace.length) == tagger.primaryNamespace
      return '!' + this.tag.substring(from: tagger.primaryNamespace.length)
    if this.tag.substring(0, length: tagger.secondaryNamespace.length) == tagger.secondaryNamespace
      return "!!" + this.tag.substring(from: tagger.secondaryNamespace.length)
    for entry: Pair<AltaString, AltaString> in tagger.namespaces.items {
      if this.tag.substring(0, length: entry.second.length) == entry.second
        return '!' + entry.first + '!' + this.tag.substring(from: entry.second.length)
    }
    return "!<" + this.tag + '>'
  }

  protected @virtual function equals(other: ref Node): bool {
    return true
  }
  public @virtual function toString(indent: Size): AltaString {
    return ""
  }

  public function toString(): AltaString {
    return this.toString(0)
  }

  public this == ref Node: bool {
    return this.equals($)
  }
  public this != ref Node: bool {
    return !(this == $)
  }
}

export class NodeBox extends Box<Node> {
  public constructor() {
    super()
  }
  public @from constructor(pointer: ptr Node) {
    super(pointer)
  }
  public @from constructor(pointer: ref Node) {
    super(pointer)
  }

  public this == NodeBox: bool {
    # check to see if the Boxes are valid before using them
    if this as bool != $ as bool
      return false
    if !this
      return true

    # they're valid; go ahead and compare
    return this as ref Node == $ as ref Node
  }
  public this == ref Node: bool {
    return this as ref Node == $
  }

  public this != NodeBox: bool {
    return !(this == $)
  }
  public this != ref Node: bool {
    return !(this == $)
  }
}

export class Mapping extends Node, Map<NodeBox, NodeBox> {
  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:map"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof Mapping)
      return false

    let that = other as ref Mapping

    if this.keys.length != that.keys.length
      return false

    for key: NodeBox in this.keys.items {
      if !that.has(key)
        return false
      if this[key] != that[key]
        return false
    }

    return true
  }
  public @override function toString(indent: Size): AltaString {
    let result: AltaString
    let spaces = spacesFor(indent)

    result += this.cannonicalTag + " {\n"

    for key: NodeBox in this.keys.items {
      result += spaces + "  ? "
      result += (key as ref Node).toString(indent + 4) + '\n'
      result += spaces + "  : "
      result += (this[key] as ref Node).toString(indent + 4) + ",\n"
    }

    result += spaces + "}"

    return result
  }
}

export class Sequence extends Node, Vector<NodeBox> {
  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:seq"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof Sequence)
      return false

    let that = other as ref Sequence

    if this.length != that.length
      return false

    for i: Size in 0..this.length {
      if this[i] != that[i]
        return false
    }

    return true
  }
  public @override function toString(indent: Size): AltaString {
    let result: AltaString
    let spaces = spacesFor(indent)

    result += this.cannonicalTag + " [\n"

    for item: NodeBox in this.items {
      result += spaces + "  " + (item as ref Node).toString(indent + 2) + ",\n"
    }

    result += spaces + "]"

    return result
  }
}

# TODO: wrap AltaString methods to return copies of YAML strings (with all the YAML info)
export class String extends Node, AltaString {
  public constructor() {
    super<Node>()
    super<AltaString>()
  }
  public constructor(string: AltaString) {
    super<Node>()
    super<AltaString>(string)
  }
  public constructor(string: AltaString, tag: AltaString) {
    super<Node>()
    super<AltaString>(string)
    this._tag(tag)
  }

  # this is an operator to preserve our YAML information when simple assignment
  # is performed to overwrite our string content
  public this = AltaString: ref String {
    super<AltaString> = $
    return this
  }

  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:str"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof String)
      return false
    let that = other as ref String
    return this as AltaString == that as AltaString
  }
  public @override function toString(indent: Size): AltaString {
    return this.cannonicalTag + " \"" + escape(super<AltaString>) + '\"'
  }
}

export class Alias extends Node {
  private var target: NodeBox

  public constructor(target: NodeBox) {
    super()
    this.target = target
  }

  protected @override @read function defaultTag(): AltaString {
    return (this.target as ref Node).defaultTag
  }
  protected @override function equals(other: ref Node): bool {
    return (other instanceof Alias) ? this.target == (other as ref Alias).target : this.target == other
  }
  public @override function toString(indent: Size): AltaString {
    # for now we just return the target's stringification
    # in the future, though, the target will be properly named
    # and we'll simply return an anchor
    return (this.target as ref Node).toString(indent)
  }
}

export class Null extends Node {
  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:null"
  }
  protected @override function equals(other: ref Node): bool {
    return other instanceof Null
  }
  public @override function toString(indent: Size): AltaString {
    return this.cannonicalTag + " null"
  }
}

export class Boolean extends Node {
  private var value: bool = false

  public constructor(value: bool) {
    super()
    this.value = value
  }

  public to bool {
    return this.value
  }

  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:bool"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof Boolean)
      return false
    let that = other as ref Boolean
    return this as bool == that as bool
  }
  public @override function toString(indent: Size): AltaString {
    return this.cannonicalTag + ' ' + (this.value ? "true" : "false")
  }
}

export class Integer extends Node {
  private var value: Int64 = 0

  public constructor(value: Int64) {
    super()
    this.value = value
  }

  public to Int64 {
    return this.value
  }

  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:int"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof Integer)
      return false
    let that = other as ref Integer
    return this as Int64 == that as Int64
  }
  public @override function toString(indent: Size): AltaString {
    return this.cannonicalTag + ' ' + numberToString<Int64>(this.value)
  }
}

export class FloatingPoint extends Node {
  private var value: double = 0.0

  public constructor(value: double) {
    super()
    this.value = value
  }

  public to double {
    return this.value
  }

  protected @override @read function defaultTag(): AltaString {
    return "tag:yaml.org,2002:float"
  }
  protected @override function equals(other: ref Node): bool {
    if !(other instanceof FloatingPoint)
      return false
    let that = other as ref FloatingPoint
    return this as double == that as double
  }
  public @override function toString(indent: Size): AltaString {
    return this.cannonicalTag + ' ' + floatingPointToString<double>(this.value)
  }
}
